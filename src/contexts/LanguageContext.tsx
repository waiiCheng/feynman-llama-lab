import React, { createContext, useContext, useState, useEffect } from 'react';

export type Language = 'zh' | 'en';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string, variables?: Record<string, string | number>) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const translations = {
  zh: {
    // Navigation
    'nav.annotation': '标注',
    'nav.management': '管理',
    'nav.architecture': '架构',
    'nav.settings': '设置',
    'nav.statistics': '统计',
    
    // Architecture tabs
    'arch.localTraining': '本地训练',
    'arch.overview': '架构概览',
    'arch.knowledgeGraph': '知识图谱',
    'arch.rag': 'RAG 检索',
    'arch.fineTuning': '模型微调',
    
    // Annotation Form
    'annotation.title': '费曼学习法标注',
    'annotation.subtitle': '"If you want to learn about nature, to appreciate nature, it is necessary that you understand the language that she speaks in."',
    'annotation.author': '— Richard P. Feynman',
    'annotation.question': '用户问题',
    'annotation.response': '费曼式回答',
    'annotation.styleFeatures': '思维模式标签',
    'annotation.quality': '回答质量',
    'annotation.notes': '备注',
    'annotation.save': '保存标注',
    'annotation.saveAndNext': '保存并下一条',
    'annotation.question.placeholder': '例如：什么是量子力学？',
    'annotation.response.placeholder': '费曼会怎么解释这个问题？用简单、直观的方式...',
    'annotation.quality.placeholder': '选择质量等级',
    'annotation.notes.placeholder': '其他备注信息...',
    'annotation.validation.title': '请填写必要字段',
    'annotation.validation.desc': '问题和回答都是必填项',
    'annotation.saved.title': '标注已保存',
    'annotation.saved.desc2': '数据已成功保存，可继续下一条标注',
    'annotation.templateHint': '按 / 快速插入模板',
    
    // Templates
    'template.analogy': '这就像...',
    'template.simplify': '简单来说...',
    'template.story': '想象一下...',
    'template.firstPrinciple': '从最基础开始...',
    'template.example': '比如说...',
    'template.why': '为什么会这样呢？',
    'template.conclusion': '总结一下...',
    
    // Quality levels
    'quality.excellent': '优秀范例',
    'quality.good': '良好',
    'quality.needsWork': '需改进',
    
    // Style features
    'style.analogy': '使用类比',
    'style.simplify': '简化复杂',
    'style.story': '讲故事',
    'style.firstprinciples': '第一性原理',
    'style.analogy.desc': '用简单例子解释复杂概念',
    'style.simplify.desc': '化繁为简的表达方式',
    'style.story.desc': '用故事情节增强理解',
    'style.firstprinciples.desc': '从基本原理出发思考',
    
    // Shortcuts
    'shortcuts.save': 'Ctrl+Enter: 保存并下一条',
    'shortcuts.tab': 'Tab: 切换字段',
    'shortcuts.template': '/: 插入模板',
    'shortcuts.clear': 'Escape: 清空',
    'shortcuts.keyboard': '快捷键',
    
    // Workspace
    'workspace.dualMode': '双屏模式',
    'workspace.singleMode': '单屏模式',
    
    // Data Management
    'manage.title': '数据管理',
    'manage.subtitle': '共 {total} 条标注数据，已筛选 {filtered} 条',
    'manage.export': '导出数据',
    'manage.search': '搜索问题或回答内容...',
    'manage.filterQuality': '筛选质量等级',
    'manage.allQuality': '全部质量',
    'manage.noData': '暂无标注数据',
    'manage.noDataDesc': '开始创建第一个标注吧！',
    'manage.viewDetail': '查看标注详情',
    'manage.question': '问题',
    'manage.response': '费曼式回答',
    'manage.stylePattern': '思维模式',
    'manage.notes': '备注',
    'manage.deleted': '已删除',
    'manage.deletedDesc': '标注数据已成功删除',
    'manage.exported': '导出完成',
    'manage.exportedDesc': '标注数据已导出为JSON文件',
    
    // Local Training Setup
    'training.title': '本地训练配置',
    'training.subtitle': '在您的本地环境中训练费曼风格的 LLM 模型',
    'training.setup': '训练配置',
    'training.data': '数据准备',
    'training.scripts': '脚本生成',
    'training.deploy': '部署指南',
    'training.modelParams': '模型参数',
    'training.systemReqs': '系统要求',
    'training.baseModel': '基础模型',
    'training.epochs': '训练轮数',
    'training.batchSize': '批次大小',
    'training.learningRate': '学习率',
    'training.gpuMemory': 'GPU 内存',
    'training.systemMemory': '系统内存',
    'training.storage': '存储空间',
    'training.pythonVersion': 'Python 版本',
    'training.dataStats': '数据统计',
    'training.annotationCount': '标注数量',
    'training.qualityDistribution': '质量分布',
    'training.avgLength': '平均长度',
    'training.exportTrainingData': '导出训练数据',
    'training.generateScript': '生成训练脚本',
    'training.configFile': '配置文件',
    'training.requirementsFile': '依赖文件',
    'training.trainingScript': '训练脚本',
    'training.localDeploy': '本地部署',
    'training.cloudDeploy': '云端部署',
    'training.downloadGenerated': '下载已生成',
    'training.configGenerated': '配置文件已生成',
    'training.configDesc': 'training_config.json 已下载',
    'training.reqGenerated': '依赖文件已生成',
    'training.reqDesc': 'requirements.txt 已下载',
    
    // Preview Panel
    'preview.realTime': '实时预览',
    'preview.quality': '质量评级',
    'preview.analysis': '质量分析',
    'preview.wordCount': '字数统计',
    'preview.complexity': '复杂度',
    'preview.complexity.复杂': '复杂',
    'preview.complexity.中等': '中等',
    'preview.complexity.简单': '简单',
    'preview.hasAnalogy': '包含类比',
    'preview.hasExample': '有具体例子',
    'preview.isSimple': '长度适中',
    
    // Template Selector
    'template.title': '费曼模板',
    'template.category.explanation': '解释说明',
    'template.category.reasoning': '推理思考',
    'template.category.storytelling': '故事叙述',
    'template.tip': '提示：在文本框中按 "/" 快速调用模板',
    
    // Architecture Overview
    'arch.overview.title': '系统架构蓝图',
    'arch.overview.subtitle': '结合微调、RAG 和知识图谱的费曼学习法 LLM 系统架构',
    'arch.ui.title': '用户界面层 (Web)',
    'arch.ui.desc': '费曼标注界面、管理系统',
    'arch.ui.components': ['标注页面', '管理界面', '实时预览'],
    'arch.kg.title': '知识图谱层',
    'arch.kg.desc': '预处理的结构化知识',
    'arch.kg.components': ['费曼的第一性原理分解树', '跨领域类比网络', '推理引擎'],
    'arch.rag.title': 'RAG 检索层',
    'arch.rag.desc': '实时外挂资料检索',
    'arch.rag.components': ['向量数据库', '原始文本库', '相似度匹配'],
    'arch.model.title': '基础模型层',
    'arch.model.desc': '微调后的 Mistral',
    'arch.model.components': ['费曼语感模型', '价值观对齐', '基础推理能力'],
    'arch.status.active': '已实现',
    'arch.status.ready': '可开始',
    'arch.status.planned': '计划中',
    'arch.dataflow.title': '⚡️ 作战流程推演',
    'arch.dataflow.question': '用户提问："费曼先生，请用你的思维模式，解释一下为什么天空是蓝色的？"',
    'arch.dataflow.step1': '1. 【知识图谱】事实框架构建：系统识别核心概念「天空是蓝色的」→ [瑞利散射, 光的波长, 大气分子]',
    'arch.dataflow.step2': '2. 【RAG检索】原始情报获取：检索引擎取回解释"瑞利散射"的权威物理学原始文本',
    'arch.dataflow.step3': '3. 【费曼内核】生成洞察：FeynmanOS启动"类比思维"模式，将复杂物理原文重构为"弹珠台比喻"',
    'arch.roadmap.title': '实施路线图',
    'arch.phase1.title': '第一阶段：微调训练',
    'arch.phase1.desc': '使用标注数据训练费曼风格模型',
    'arch.phase2.title': '第二阶段：RAG 集成',
    'arch.phase2.desc': '添加向量数据库和文档检索',
    'arch.phase3.title': '第三阶段：知识图谱',
    'arch.phase3.desc': '构建概念关系网络和推理引擎',
    'arch.startTraining': '开始本地训练',
    'arch.localOnly': '完全本地化，无需外部依赖',
    
    // Fine-tuning Layer
    'finetune.title': '基础模型层',
    'finetune.subtitle': '微调 Mistral 模型，注入费曼式解释风格和价值观对齐',
    'finetune.console': '训练控制台',
    'finetune.totalSamples': '总样本数',
    'finetune.epochs': '训练轮数',
    'finetune.currentEpoch': '当前轮次',
    'finetune.progress': '完成度',
    'finetune.status.training': '训练中',
    'finetune.status.paused': '已暂停',
    'finetune.status.idle': '空闲',
    'finetune.start': '开始训练',
    'finetune.pause': '暂停',
    'finetune.config': '配置',
    'finetune.metrics': '性能指标',
    'finetune.features': '费曼特征',
    'finetune.data': '训练数据',
    'finetune.trainLoss': '训练损失',
    'finetune.valLoss': '验证损失',
    'finetune.bleuScore': 'BLEU 分数',
    'finetune.feynmanSimilarity': '费曼风格相似度',
    'finetune.featureName.analogy': '使用类比',
    'finetune.featureName.simplify': '简化复杂概念',
    'finetune.featureName.story': '讲故事',
    'finetune.featureName.firstprinciples': '第一性原理',
    'finetune.featureName.interactive': '互动提问',
    'finetune.weight': '权重',
    'finetune.samples': '样本',
    'finetune.dataManagement': '数据集管理',
    'finetune.fileSize': '大小',
    'finetune.lastUpdate': '最后更新',
    'finetune.uploadDataset': '上传数据集',
    'finetune.exportFormat': '导出格式',
    'finetune.preprocessing': '数据预处理',
    'finetune.dataCleaning': '数据清洗',
    'finetune.formatConversion': '格式转换',
    'finetune.trainValSplit': '训练验证分割',
    'finetune.completed': '完成',
    'finetune.deployment': '模型部署',
    'finetune.localDeploy': '本地部署',
    'finetune.localDeployDesc': '下载模型到本地运行',
    'finetune.downloadModel': '下载模型',
    'finetune.apiDeploy': 'API 部署',
    'finetune.apiDeployDesc': '部署为 REST API 服务',
    'finetune.createApi': '创建 API',
    'finetune.integrationDeploy': '集成部署',
    'finetune.integrationDeployDesc': '与 RAG 和知识图谱集成',
    'finetune.integrateDeploy': '集成部署',
    
    // Knowledge Graph Layer
    'kg.title': '知识图谱层',
    'kg.subtitle': '构建费曼概念网络，实现概念间的关联推理',
    'kg.search': '图谱搜索',
    'kg.searchPlaceholder': '搜索概念节点...',
    'kg.addConcept': '添加概念',
    'kg.conceptNodes': '概念节点',
    'kg.connections': '连接',
    'kg.feynmanExplanations': '费曼解释',
    'kg.relationNetwork': '关系网络',
    'kg.strength': '强度',
    'kg.reasoningEngine': '推理引擎',
    'kg.pathFinding': '路径查找',
    'kg.pathFindingDesc': '发现概念间的隐藏联系',
    'kg.runPathAnalysis': '运行路径分析',
    'kg.similarity': '相似性计算',
    'kg.similarityDesc': '基于图结构的概念相似度',
    'kg.calculateSimilarity': '计算相似性',
    'kg.localGraphDb': '本地图数据库',
    'kg.localGraphDbDesc': '知识图谱可以使用 NetworkX (Python) 或 Neo4j 在本地构建',
    'kg.downloadScript': '下载图谱构建脚本',
    
    // RAG Layer
    'rag.title': 'RAG 检索层',
    'rag.subtitle': '实时检索相关文档，为模型提供准确的背景知识',
    'rag.semanticSearch': '语义检索测试',
    'rag.searchPlaceholder': '输入查询问题，例如：什么是能量？',
    'rag.retrieve': '检索',
    'rag.results': '检索结果',
    'rag.similarity': '相似度',
    'rag.vectorCollections': '向量集合',
    'rag.documents': '文档',
    'rag.vectors': '向量',
    'rag.lastUpdate': '最后更新',
    'rag.status.active': '活跃',
    'rag.status.indexing': '索引中',
    'rag.status.error': '错误',
    'rag.docManagement': '文档管理',
    'rag.uploadDoc': '上传新文档',
    'rag.supportedFormats': '支持格式',
    'rag.processingFlow': '处理流程',
    'rag.docChunking': '文档分块 (512 tokens)',
    'rag.vectorEncoding': '向量化编码',
    'rag.indexBuilding': '索引构建',
    'rag.retrievalConfig': '检索配置',
    'rag.topK': 'Top-K 检索',
    'rag.topKDesc': '返回前 K 个最相似的文档片段',
    'rag.similarityThreshold': '相似度阈值',
    'rag.similarityThresholdDesc': '过滤低相似度的结果',
    'rag.maxTokens': '最大 Tokens',
    'rag.maxTokensDesc': '限制上下文长度',
    'rag.localVectorDb': '本地向量数据库',
    'rag.localVectorDbDesc': 'RAG 功能可以使用 FAISS、ChromaDB 或 Qdrant 在本地部署',
    'rag.downloadRagScript': '下载 RAG 部署脚本',
    'rag.feynmanLectures': '费曼物理学讲义',
    'rag.feynmanInterviews': '费曼访谈录',
    'rag.scientificPapers': '科学论文集',
    
    // Main Page
    'main.title': '费曼学习法标注',
  },
  en: {
    // Navigation
    'nav.annotation': 'Annotation',
    'nav.management': 'Management',
    'nav.architecture': 'Architecture',
    'nav.settings': 'Settings',
    'nav.statistics': 'Statistics',
    
    // Architecture tabs
    'arch.localTraining': 'Local Training',
    'arch.overview': 'Architecture',
    'arch.knowledgeGraph': 'Knowledge Graph',
    'arch.rag': 'RAG Retrieval',
    'arch.fineTuning': 'Fine-tuning',
    
    // Annotation Form
    'annotation.title': 'Feynman Learning Annotation',
    'annotation.subtitle': '"If you want to learn about nature, to appreciate nature, it is necessary that you understand the language that she speaks in."',
    'annotation.author': '— Richard P. Feynman',
    'annotation.question': 'User Question',
    'annotation.response': 'Feynman-style Response',
    'annotation.styleFeatures': 'Thinking Pattern Tags',
    'annotation.quality': 'Response Quality',
    'annotation.notes': 'Notes',
    'annotation.save': 'Save Annotation',
    'annotation.saveAndNext': 'Save & Next',
    'annotation.question.placeholder': 'e.g., What is quantum mechanics?',
    'annotation.response.placeholder': 'How would Feynman explain this? Use simple, intuitive ways...',
    'annotation.quality.placeholder': 'Select quality level',
    'annotation.notes.placeholder': 'Additional notes...',
    'annotation.validation.title': 'Please fill required fields',
    'annotation.validation.desc': 'Question and response are required',
    'annotation.saved.title': 'Annotation Saved',
    'annotation.saved.desc2': 'Data successfully saved, continue to next annotation',
    'annotation.templateHint': 'Press / to quickly insert templates',
    
    // Templates
    'template.analogy': 'This is like...',
    'template.simplify': 'Simply put...',
    'template.story': 'Imagine...',
    'template.firstPrinciple': 'Starting from the basics...',
    'template.example': 'For example...',
    'template.why': 'Why does this happen?',
    'template.conclusion': 'To summarize...',
    
    // Quality levels
    'quality.excellent': 'Excellent',
    'quality.good': 'Good',
    'quality.needsWork': 'Needs Work',
    
    // Style features
    'style.analogy': 'Use Analogies',
    'style.simplify': 'Simplify Complex',
    'style.story': 'Tell Stories',
    'style.firstprinciples': 'First Principles',
    'style.analogy.desc': 'Explain complex concepts with simple examples',
    'style.simplify.desc': 'Simplify complex expressions',
    'style.story.desc': 'Use storytelling to enhance understanding',
    'style.firstprinciples.desc': 'Think from basic principles',
    
    // Shortcuts
    'shortcuts.save': 'Ctrl+Enter: Save & Next',
    'shortcuts.tab': 'Tab: Switch Fields',
    'shortcuts.template': '/: Insert Template',
    'shortcuts.clear': 'Escape: Clear',
    'shortcuts.keyboard': 'Shortcuts',
    
    // Workspace
    'workspace.dualMode': 'Dual Mode',
    'workspace.singleMode': 'Single Mode',
    
    // Data Management
    'manage.title': 'Data Management',
    'manage.subtitle': '{total} annotations total, {filtered} filtered',
    'manage.export': 'Export Data',
    'manage.search': 'Search questions or responses...',
    'manage.filterQuality': 'Filter by Quality',
    'manage.allQuality': 'All Quality',
    'manage.noData': 'No annotations yet',
    'manage.noDataDesc': 'Start creating your first annotation!',
    'manage.viewDetail': 'View Annotation Detail',
    'manage.question': 'Question',
    'manage.response': 'Feynman-style Response',
    'manage.stylePattern': 'Thinking Patterns',
    'manage.notes': 'Notes',
    'manage.deleted': 'Deleted',
    'manage.deletedDesc': 'Annotation successfully deleted',
    'manage.exported': 'Export Complete',
    'manage.exportedDesc': 'Annotations exported as JSON file',
    
    // Training
    'training.title': 'Local Training Setup',
    'training.subtitle': 'Configure and train your Feynman learning model locally',
    'training.setup': 'Setup',
    'training.data': 'Data',
    'training.scripts': 'Scripts',
    'training.deploy': 'Deploy',
    'training.modelParams': 'Model Parameters',
    'training.baseModel': 'Base Model',
    'training.systemReqs': 'System Requirements',
    'training.gpuMemory': 'GPU Memory',
    'training.dataStats': 'Data Statistics',
    'training.generateScript': 'Generate Script',
    'training.epochs': 'Training Epochs',
    'training.batchSize': 'Batch Size',
    'training.learningRate': 'Learning Rate',
    'training.systemMemory': 'System Memory',
    'training.storage': 'Storage Space',
    'training.pythonVersion': 'Python Version',
    'training.recommendedConfig': 'Recommended Configuration',
    'training.totalAnnotations': 'Total Annotations',
    'training.trainingSet': 'Training Set',
    'training.qualityDistribution': 'Quality Distribution',
    'training.excellent': 'Excellent',
    'training.good': 'Good',
    'training.needsWork': 'Needs Work',
    'training.dataExport': 'Data Export',
    'training.exportTrainingData': 'Export Training Data (JSON)',
    'training.dataFormatDescription': 'Data Format Description',
    'training.generateTrainingScript': 'Generate Training Script',
    'training.generateDependencies': 'Generate Dependencies',
    'training.generateConfig': 'Generate Configuration File',
    'training.trainingWorkflow': 'Training Workflow',
    'training.envSetup': 'Environment Setup',
    'training.envSetupDesc': 'Install Python dependencies and CUDA',
    'training.dataExportStep': 'Data Export',
    'training.dataExportDesc': 'Export JSON data from annotation interface',
    'training.scriptDownload': 'Script Download',
    'training.scriptDownloadDesc': 'Download auto-generated training script',
    'training.startTraining': 'Start Training',
    'training.startTrainingDesc': 'Run the training script locally',
    'training.realTimePreview': 'Start Real-time Preview...',
    'training.localDeployment': 'Local Deployment',
    'training.deploymentInstructions': 'Instructions for Local Deployment',
    'training.loadModelCode': 'Model Loading Code',
    'training.performanceOptimization': 'Performance Optimization',
    'training.quantization': 'Quantization',
    'training.quantizationDesc': 'Reduce model size using 4-bit quantization',
    'training.caching': 'Caching',
    'training.cachingDesc': 'Cache frequently used responses',
    'training.inference': 'Inference Acceleration',
    'training.inferenceDesc': 'Use vLLM for fast inference',
    'training.scriptGenerated': 'Training Script Generated',
    'training.scriptGeneratedDesc': 'Python training script has been downloaded locally',
    'training.dataExported': 'Training Data Exported',
    'training.dataExportedDesc': 'annotation data exported in JSON format',
    'training.dependenciesGenerated': 'Dependencies File Generated',
    'training.dependenciesGeneratedDesc': 'requirements.txt has been downloaded',
    'training.startFeynmanTraining': '🚀 Starting Feynman learning model training...',
    'training.loadingFinetuning': '📚 Starting fine-tuning...',
    'training.trainingComplete': '✅ Training complete! Model saved to:',

    // Knowledge Graph
    'kg.title': 'Knowledge Graph Layer',
    'kg.subtitle': 'Build Feynman concept networks for relational reasoning between concepts',
    'kg.search': 'Graph Search',
    'kg.searchPlaceholder': 'Search concept nodes...',
    'kg.addConcept': 'Add Concept',
    'kg.conceptNodes': 'Concept Nodes',
    'kg.connections': 'connections',
    'kg.feynmanExplanations': 'Feynman explanations',
    'kg.relationshipNetwork': 'Relationship Network',
    'kg.strength': 'Strength',
    'kg.reasoningEngine': 'Reasoning Engine',
    'kg.pathFinding': 'Path Finding',
    'kg.pathFindingDesc': 'Discover hidden connections between concepts',
    'kg.runPathAnalysis': 'Run Path Analysis',
    'kg.similarityCalculation': 'Similarity Calculation',
    'kg.similarityDesc': 'Graph structure-based concept similarity',
    'kg.calculateSimilarity': 'Calculate Similarity',
    'kg.localGraphDatabase': 'Local Graph Database',
    'kg.graphDatabaseDesc': 'Knowledge graphs can be built locally using NetworkX (Python) or Neo4j',
    'kg.downloadGraphScript': 'Download Graph Building Script',
    'kg.quantumMechanics': 'Quantum Mechanics',
    'kg.compoundInterest': 'Compound Interest',
    'kg.energy': 'Energy',
    'kg.probability': 'Probability',
    'kg.exponentialGrowth': 'Exponential Growth',
    'kg.conservationLaw': 'Conservation Law',

    // RAG Layer
    'rag.title': 'RAG Retrieval Layer',
    'rag.subtitle': 'Real-time retrieval of relevant documents to provide accurate background knowledge for the model',
    'rag.semanticRetrieval': 'Semantic Retrieval Test',
    'rag.searchPlaceholder': 'Enter query question, e.g.: What is energy?',
    'rag.retrieve': 'Retrieve',
    'rag.retrievalResults': 'Retrieval Results',
    'rag.similarity': 'Similarity',
    'rag.vectorCollections': 'Vector Collections',
    'rag.active': 'Active',
    'rag.indexing': 'Indexing',
    'rag.error': 'Error',
    'rag.documents': 'documents',
    'rag.vectors': 'vectors',
    'rag.lastUpdate': 'Last update',
    'rag.documentManagement': 'Document Management',
    'rag.uploadNewDocument': 'Upload New Document',
    'rag.supportedFormats': 'Supported Formats',
    'rag.processingWorkflow': 'Processing Workflow',
    'rag.documentChunking': 'Document chunking (512 tokens)',
    'rag.vectorEncoding': 'Vector encoding',
    'rag.indexBuilding': 'Index building',
    'rag.retrievalConfig': 'Retrieval Configuration',
    'rag.topKRetrieval': 'Top-K Retrieval',
    'rag.topKDesc': 'Return top K most similar document segments',
    'rag.similarityThreshold': 'Similarity Threshold',
    'rag.similarityThresholdDesc': 'Filter low similarity results',
    'rag.maxTokens': 'Max Tokens',
    'rag.maxTokensDesc': 'Limit context length',
    'rag.localVectorDatabase': 'Local Vector Database',
    'rag.vectorDatabaseDesc': 'RAG functionality can be deployed locally using FAISS, ChromaDB, or Qdrant',
    'rag.downloadRAGScript': 'Download RAG Deployment Script',
    'rag.feynmanLectures': 'Feynman Lectures on Physics',
    'rag.feynmanInterviews': 'Feynman Interview Archives',
    'rag.scientificPapers': 'Scientific Papers Collection',

    // Common
    'optional': 'optional',
    
    // Preview Panel
    'preview.realTime': 'Real-time Preview',
    'preview.quality': 'Quality Rating',
    'preview.analysis': 'Quality Analysis',
    'preview.wordCount': 'Word Count',
    'preview.complexity': 'Complexity',
    'preview.complexity.复杂': 'Complex',
    'preview.complexity.中等': 'Medium',
    'preview.complexity.简单': 'Simple',
    'preview.hasAnalogy': 'Contains Analogy',
    'preview.hasExample': 'Has Examples',
    'preview.isSimple': 'Appropriate Length',
    
    // Template Selector
    'template.title': 'Feynman Templates',
    'template.category.explanation': 'Explanation',
    'template.category.reasoning': 'Reasoning',
    'template.category.storytelling': 'Storytelling',
    'template.tip': 'Tip: Press "/" in text box to quickly invoke templates',
    
    // Architecture Overview
    'arch.overview.title': 'System Architecture Blueprint',
    'arch.overview.subtitle': 'Feynman-style LLM system architecture combining fine-tuning, RAG, and knowledge graphs',
    'arch.ui.title': 'User Interface Layer (Web)',
    'arch.ui.desc': 'Feynman annotation interface, management system',
    'arch.ui.components': ['Annotation Page', 'Management Interface', 'Real-time Preview'],
    'arch.kg.title': 'Knowledge Graph Layer',
    'arch.kg.desc': 'Preprocessed structured knowledge',
    'arch.kg.components': ['First Principles Deconstruction Tree', 'Cross-Domain Analogy Network', 'Reasoning Engine'],
    'arch.rag.title': 'RAG Retrieval Layer',
    'arch.rag.desc': 'Real-time external resource retrieval',
    'arch.rag.components': ['Vector Database', 'Original Text Library', 'Similarity Matching'],
    'arch.model.title': 'Base Model Layer',
    'arch.model.desc': 'Fine-tuned Mistral',
    'arch.model.components': ['Feynman Language Model', 'Value Alignment', 'Basic Reasoning Ability'],
    'arch.status.active': 'Implemented',
    'arch.status.ready': 'Ready to Start',
    'arch.status.planned': 'Planned',
    'arch.dataflow.title': '⚡️ Combat Procedure Walkthrough',
    'arch.dataflow.question': 'User asks: "Mr. Feynman, using your thinking approach, explain why the sky is blue?"',
    'arch.dataflow.step1': '1. 【Knowledge Graph】Fact Framework Construction: System identifies core concept "why sky is blue" → [Rayleigh scattering, light wavelength, atmospheric molecules]',
    'arch.dataflow.step2': '2. 【RAG Retrieval】Raw Intelligence Acquisition: Retrieval engine fetches authoritative physics texts explaining "Rayleigh scattering"',
    'arch.dataflow.step3': '3. 【Feynman Core】Insight Generation: FeynmanOS activates "analogical thinking" mode, reconstructing complex physics into "pinball machine metaphor"',
    'arch.roadmap.title': 'Implementation Roadmap',
    'arch.phase1.title': 'Phase 1: Fine-tuning Training',
    'arch.phase1.desc': 'Train Feynman-style model using annotation data',
    'arch.phase2.title': 'Phase 2: RAG Integration',
    'arch.phase2.desc': 'Add vector database and document retrieval',
    'arch.phase3.title': 'Phase 3: Knowledge Graph',
    'arch.phase3.desc': 'Build concept relationship network and reasoning engine',
    'arch.startTraining': 'Start Local Training',
    'arch.localOnly': 'Completely local, no external dependencies',
    
    // Fine-tuning Layer
    'finetune.title': 'Base Model Layer',
    'finetune.subtitle': 'Fine-tune Mistral model, inject Feynman-style explanation style and value alignment',
    'finetune.console': 'Training Console',
    'finetune.totalSamples': 'Total Samples',
    'finetune.epochs': 'Training Epochs',
    'finetune.currentEpoch': 'Current Epoch',
    'finetune.progress': 'Progress',
    'finetune.status.training': 'Training',
    'finetune.status.paused': 'Paused',
    'finetune.status.idle': 'Idle',
    'finetune.start': 'Start Training',
    'finetune.pause': 'Pause',
    'finetune.config': 'Configuration',
    'finetune.metrics': 'Performance Metrics',
    'finetune.features': 'Feynman Features',
    'finetune.data': 'Training Data',
    'finetune.trainLoss': 'Training Loss',
    'finetune.valLoss': 'Validation Loss',
    'finetune.bleuScore': 'BLEU Score',
    'finetune.feynmanSimilarity': 'Feynman Style Similarity',
    'finetune.featureName.analogy': 'Use Analogies',
    'finetune.featureName.simplify': 'Simplify Complex Concepts',
    'finetune.featureName.story': 'Tell Stories',
    'finetune.featureName.firstprinciples': 'First Principles',
    'finetune.featureName.interactive': 'Interactive Questioning',
    'finetune.weight': 'Weight',
    'finetune.samples': 'samples',
    'finetune.dataManagement': 'Dataset Management',
    'finetune.fileSize': 'Size',
    'finetune.lastUpdate': 'Last Update',
    'finetune.uploadDataset': 'Upload Dataset',
    'finetune.exportFormat': 'Export Format',
    'finetune.preprocessing': 'Data Preprocessing',
    'finetune.dataCleaning': 'Data Cleaning',
    'finetune.formatConversion': 'Format Conversion',
    'finetune.trainValSplit': 'Train-Validation Split',
    'finetune.completed': 'Completed',
    'finetune.deployment': 'Model Deployment',
    'finetune.localDeploy': 'Local Deployment',
    'finetune.localDeployDesc': 'Download model to run locally',
    'finetune.downloadModel': 'Download Model',
    'finetune.apiDeploy': 'API Deployment',
    'finetune.apiDeployDesc': 'Deploy as REST API service',
    'finetune.createApi': 'Create API',
    'finetune.integrationDeploy': 'Integration Deployment',
    'finetune.integrationDeployDesc': 'Integrate with RAG and knowledge graph',
    'finetune.integrateDeploy': 'Integration Deploy',
  }
};

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('zh');

  const t = (key: string, variables?: Record<string, string | number>): string => {
    let translation = translations[language][key as keyof typeof translations[typeof language]] || key;
    
    // Handle array translations - join them with comma
    if (Array.isArray(translation)) {
      translation = translation.join(', ');
    }
    
    if (variables && typeof translation === 'string') {
      Object.entries(variables).forEach(([variableKey, value]) => {
        translation = (translation as string).replace(`{${variableKey}}`, String(value));
      });
    }
    
    return translation as string;
  };

  // 动态切换字体族
  useEffect(() => {
    document.body.className = document.body.className.replace(/lang-\w+/g, '');
    document.body.classList.add(`lang-${language}`);
  }, [language]);

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};